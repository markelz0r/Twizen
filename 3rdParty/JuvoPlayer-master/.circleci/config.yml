version: 2.0

jobs:
  build_and_run_unit_tests:
    working_directory: /build
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1
        auth:
          username: ${DOCKERHUB_USER}
          password: ${DOCKERHUB_PASSWORD}
    steps:
      - run:
          name: Setup environment variables
          command: echo "export CERTS_PATH=/build/certs" >> $BASH_ENV
      - checkout
      - run:
          name: Setup proxy
          command:
            curl -sL https://art.sec.samsung.net/artifactory/tools/CircleCI/scripts/set_proxy_setting.sh | sh
      - run:
          name: Install xlstproc
          command: apt update && DEBIAN_FRONTEND="noninteractive" apt install -y --no-install-recommends xsltproc
      - run:
          name: Install yarn and nodejs
          command: >
            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - &&
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list &&
            apt update &&
            DEBIAN_FRONTEND="noninteractive" apt install -y --no-install-recommends yarn nodejs
      - run:
          name: Bundle JuvoReactNative
          command: >
            cd JuvoReactNative && yarn && yarn bundle
      - run:
          name: Build solution
          command: >
            dotnet restore &&
            dotnet build /nodeReuse:false -c Release
            /p:"AuthorPath=${CERTS_PATH}/partner_2019.p12;AuthorPass=${AUTHOR_PASS}"
            /p:"DistributorPath=${CERTS_PATH}/tizen-distributor-signer.p12;DistributorPass=${DISTRIBUTOR_PASS}"
      - run:
          name: Run unit tests
          command: dotnet test /nodeReuse:false JuvoPlayer.Tests/JuvoPlayer.Tests.csproj --logger:trx -f netcoreapp3.1 --verbosity normal
      - run:
          name: Convert MSTest report to JUnit
          command: >
            mkdir -p TestResults && 
            xsltproc -o TestResults/output.xml scripts/mstest-junit.xlst JuvoPlayer.Tests/TestResults/*
          when: always
      - store_test_results:
          path: TestResults/
          when: always
      - run:
          name: Copy artifacts to tmp directory
          command: >
            mkdir /tmp/artifacts &&
            cp JuvoPlayer.TizenTests/bin/Release/tizen60/*.tpk /tmp/artifacts/ &&
            cp JuvoPlayer.OpenGL/bin/Release/tizen60/*.tpk /tmp/artifacts/ &&
            cp XamarinPlayer/XamarinPlayer.Tizen.TV/bin/Release/tizen60/*.tpk /tmp/artifacts &&
            cp JuvoReactNative/Tizen/bin/Release/tizen60/*.tpk /tmp/artifacts
      - store_artifacts:
          path: /tmp/artifacts
          destination: tpks
      - persist_to_workspace:
          root: .
          paths:
            - ./JuvoPlayer.TizenTests/bin/Release/tizen60/*.tpk
            - ./scripts/nunit3-junit.xlst
            - ./atr_tests/*
  run_integration_tests:
    working_directory: /build
    docker:
      - image: ubuntu
        auth:
          username: ${DOCKERHUB_USER}
          password: ${DOCKERHUB_PASSWORD}
    steps:
      - attach_workspace:
          at: /build
      - add_ssh_keys:
          fingerprints:
            - "84:87:bf:67:e0:45:71:04:e7:97:2d:6d:fd:ca:01:67"
      - run:
          name: Setup environment variables
          command: >
            TPK_PATH=`find -name *.tpk` &&
            TPK_NAME=`basename ${TPK_PATH}` &&
            echo "export TPK_PATH=${TPK_PATH}" >> $BASH_ENV &&
            echo "export TPK_NAME=${TPK_NAME}" >> $BASH_ENV
      - run:
          name: Install dependencies
          command: >
            apt update && DEBIAN_FRONTEND="noninteractive" apt install -y --no-install-recommends xsltproc openssh-client
      - run:
          name: Run ATR tests
          no_output_timeout: 20m
          command: >
            scp -o StrictHostKeyChecking=no ${TPK_PATH} ${ATR_RUNNER_USER}@${ATR_RUNNER_IP}:/tmp/ &&
            scp -r -o StrictHostKeyChecking=no /build/atr_tests ${ATR_RUNNER_USER}@${ATR_RUNNER_IP}:/tmp/ &&
            ssh -t -o StrictHostKeyChecking=no ${ATR_RUNNER_USER}@${ATR_RUNNER_IP} "cd /home/${ATR_RUNNER_USER}/weed/atr &&
            rm -rf results &&
            rm -rf atr_tests &&
            mkdir atr_tests &&
            cp -rf /tmp/atr_tests/* atr_tests &&
            cp /tmp/${TPK_NAME} atr_tests &&
            python3 atr_in_docker.py
            --task-scenario JuvoPlayerTest
            --tty ${TTY_DEV}
            --irda-device ${IRDA_DEV}
            --log-level debug
            --dlog-tags JuvoPlayer UT DOTNET_LAUNCHER
            --url ${IMAGE_URL}
            --tizen ${TIZEN_VERSION}
            --custom-docker-arguments=\"-v /home/${ATR_RUNNER_USER}/weed/atr/atr_tests:/root/atr/src/tests/juvo_player_test:ro\"
            --board-version ${BOARD_VERSION}"
      - run:
          name: Download test results
          command: scp -o StrictHostKeyChecking=no -r ${ATR_RUNNER_USER}@${ATR_RUNNER_IP}:/home/${ATR_RUNNER_USER}/weed/atr/results/* results/
          when: always
      - store_artifacts:
          path: results
          destination: results
          when: always
      - run:
          name: Convert NUnit report to JUnit
          command: >
            mkdir -p TestResults &&
            xsltproc -o TestResults/output.xml scripts/nunit3-junit.xlst
            results/ATR_Task/JuvoPlayerTest/JuvoPlayerTest/JuvoPlayer.TizenTests.xml
          when: always
      - store_test_results:
          path: TestResults/
          when: always

workflows:
  version: 2
  commit:
    jobs:
      - build_and_run_unit_tests
  nightly:
    triggers:
      - schedule:
          cron: "0 1 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build_and_run_unit_tests
      - run_integration_tests:
          requires:
            - build_and_run_unit_tests